err <- rep(0,k)
for(i in 1:k) {
yHat <- X %*% larBeta[,i]
t[i] <- sum(abs(larBeta[,i]))
err[i] <- mean(abs(Y - yHat))
}
errBar <- matrix(NA,2,dim(mySum)[2]+k)
errBar[1,1:dim(mySum)[2]] <- mySum[1,]
errBar[1,-(1:dim(mySum)[2])] <- t
errBar[2,-(1:dim(mySum)[2])] <- err
interpi <- as.data.frame(t(errBar))
interpi <- zoo(interpi)
index(interpi) <- interpi[,1]
interpi <- na.approx(interpi, na.rm=F)
errBar <- t(as.matrix(interpi))
errBar <- errBar[2,1:dim(mySum)[2]]
# -------------------- 632+ ERROR TOWARDS T -------------------- #
errHat <- colMeans(mySum[-1,], na.rm=T)
errHat <- c(errHat)
errBar <- c(errBar)
myGamma <- c(myGamma)
rHat <- (errHat-errBar) / (myGamma-errBar)
omegaHat <- 0.632 / (1 - (0.368*rHat))
errFinal <- ((1-omegaHat) * errBar) + (errHat * omegaHat)
# -------------------- PLOT BOOTSTRAP ERROR -------------------- #
# index <- seq(1,dim(mySum)[2],100)
# write.csv(errFinal,file="myErr-1.csv")
par(mfrow=c(2,2))
t <- c(mySum[1,])
k <- length(t)
# ---------------------------------------- #
plot(t, rep(0,k), type="l", ylim=c(0, 4),
xlab="t value", ylab="absolute error")
title("1 bootstrap estimate",
cex.main = 2,   font.main= 1)
for(i in 1:dn+1) { lines(t, mySum[i,], lwd=1) }
lines(t, colMeans(mySum[-1,], na.rm=T), lwd=4, col="RED")
# ---------------------------------------- #
for(i in 1:dn+1) { mySum[i,] <- 0.632*c(mySum[i,]) + 0.368*c(errBar) }
plot(t, rep(0,k), type="l", ylim=c(0, 3),
xlab="t value", ylab="absolute error")
title("0.632 bootstrap estimate",
cex.main = 2,   font.main= 1)
for(i in 1:dn+1) { lines(t, mySum[i,], lwd=1) }
lines(t, colMeans(mySum[-1,], na.rm=T), lwd=4, col="RED")
# ---------------------------------------- #
plot(t, rep(0,k), type="l", ylim=c(0, 4),
xlab="t value", ylab="overfitting rate")
title("relative rate of overfitting",
cex.main = 2,   font.main= 1)
lines(t, rHat, lwd=4, col="RED")
# ---------------------------------------- #
plot(t, rep(0,k), type="l", ylim=c(0, 4),
xlab="t value", ylab="predictive error")
title("0.632+ bootstrap estimate",
cex.main = 2,   font.main= 1)
lines(t, errFinal, lwd=4, col="RED")
errFinal
write.csv(errFinal,file="myErr-1.csv")
write.csv(rbind(t,errFinal),file="myErr-1.csv")
rm(list=ls())
library(zoo)
err1 <- read.csv("myErr-1.csv")
err2 <- read.csv("myErr-2.csv")
err3 <- read.csv("myErr-3.csv")
rowSums(err1, na.rm=T)
View(err1)
err1 <- err1[,-1]
rowSums(err1, na.rm=T)
rowSums(err2, na.rm=T)
err2 <- err2[,-1]
rowSums(err2, na.rm=T)
err3 <- err3[,-1]
myPlot <- matrix(NA,4,1000)
myPlot[1,] <- 0:999 / 100
tempPlot <- matrix(NA,2,1000)
tempPlot[1,] <- 0:999 / 100
tempPlot <- cbind(tempPlot,err1)
interpi <- as.data.frame(t(tempPlot))
interpi <- zoo(interpi)
index(interpi) <- interpi[,1]
interpi <- na.approx(interpi, na.rm=T)
tempPlot <- t(as.matrix(interpi))
tempPlot <- tempPlot[,1:1000]
colnames(tempPlot) <- rownames(tempPlot) <- NULL
myPlot[2,] <- tempPlot[2,]
tempPlot <- matrix(NA,2,1000)
tempPlot[1,] <- 0:999 / 100
tempPlot <- cbind(tempPlot,err2)
interpi <- as.data.frame(t(tempPlot))
interpi <- zoo(interpi)
index(interpi) <- interpi[,1]
interpi <- na.approx(interpi, na.rm=F)
tempPlot <- t(as.matrix(interpi))
tempPlot <- tempPlot[,1:1000]
colnames(tempPlot) <- rownames(tempPlot) <- NULL
myPlot[3,] <- tempPlot[2,]
tempPlot <- matrix(NA,2,1000)
tempPlot[1,] <- 0:999 / 100
tempPlot <- cbind(tempPlot,err3)
interpi <- as.data.frame(t(tempPlot))
interpi <- zoo(interpi)
index(interpi) <- interpi[,1]
interpi <- na.approx(interpi, na.rm=F)
tempPlot <- t(as.matrix(interpi))
tempPlot <- tempPlot[,1:1000]
colnames(tempPlot) <- rownames(tempPlot) <- NULL
myPlot[4,] <- tempPlot[2,]
par(mfrow=c(1,1))
plot(myPlot[1,], rep(0,1000), type="l", ylim=c(0, 4),
xlab="t value", ylab="predictive error")
title("average 0.632+ bootstrap estimate",
cex.main = 2,   font.main= 1)
lines(myPlot[1,], myPlot[2,], lwd=1)
lines(myPlot[1,], myPlot[3,], lwd=1)
lines(myPlot[1,], myPlot[4,], lwd=1)
lines(myPlot[1,], colSums(myPlot[2:4,],na.rm=T), lwd=4, col="RED")
lines(myPlot[1,], colMeans(myPlot[2:4,],na.rm=T), lwd=4, col="RED")
myPlot <- matrix(NA,4,1000)
myPlot[1,] <- 0:999 / 100
tempPlot <- matrix(NA,2,1000)
tempPlot[1,] <- 0:999 / 100
tempPlot <- cbind(tempPlot,err1)
interpi <- as.data.frame(t(tempPlot))
interpi <- zoo(interpi)
index(interpi) <- interpi[,1]
interpi <- na.approx(interpi, na.rm=T)
tempPlot <- t(as.matrix(interpi))
tempPlot <- tempPlot[,1:1000]
colnames(tempPlot) <- rownames(tempPlot) <- NULL
myPlot[2,] <- tempPlot[2,]
myPlot <- matrix(NA,4,1000)
myPlot[1,] <- 0:999 / 100
tempPlot <- matrix(NA,2,1000)
tempPlot[1,] <- 0:999 / 100
tempPlot <- cbind(tempPlot,err1)
interpi <- as.data.frame(t(tempPlot))
interpi <- zoo(interpi)
index(interpi) <- interpi[,1]
interpi <- na.approx(interpi, na.rm=F)
tempPlot <- t(as.matrix(interpi))
tempPlot <- tempPlot[,1:1000]
colnames(tempPlot) <- rownames(tempPlot) <- NULL
myPlot[2,] <- tempPlot[2,]
tempPlot <- matrix(NA,2,1000)
tempPlot[1,] <- 0:999 / 100
tempPlot <- cbind(tempPlot,err2)
interpi <- as.data.frame(t(tempPlot))
interpi <- zoo(interpi)
index(interpi) <- interpi[,1]
interpi <- na.approx(interpi, na.rm=F)
tempPlot <- t(as.matrix(interpi))
tempPlot <- tempPlot[,1:1000]
colnames(tempPlot) <- rownames(tempPlot) <- NULL
myPlot[3,] <- tempPlot[2,]
tempPlot <- matrix(NA,2,1000)
tempPlot[1,] <- 0:999 / 100
tempPlot <- cbind(tempPlot,err3)
interpi <- as.data.frame(t(tempPlot))
interpi <- zoo(interpi)
index(interpi) <- interpi[,1]
interpi <- na.approx(interpi, na.rm=F)
tempPlot <- t(as.matrix(interpi))
tempPlot <- tempPlot[,1:1000]
colnames(tempPlot) <- rownames(tempPlot) <- NULL
myPlot[4,] <- tempPlot[2,]
par(mfrow=c(1,1))
plot(myPlot[1,], rep(0,1000), type="l", ylim=c(0, 4),
xlab="t value", ylab="predictive error")
title("average 0.632+ bootstrap estimate",
cex.main = 2,   font.main= 1)
lines(myPlot[1,], myPlot[2,], lwd=1)
lines(myPlot[1,], myPlot[3,], lwd=1)
lines(myPlot[1,], myPlot[4,], lwd=1)
lines(myPlot[1,], colMeans(myPlot[2:4,],na.rm=T), lwd=4, col="RED")
library(lars)
rm(list=ls())
myData <- read.csv("myData-1.csv")
myData <- myData[,2:dim(myData)[2]]
myX <- as.matrix(myData[,2:dim(myData)[2]])
myY <- myData[,1]
dn <- dim(myX)[1]
dm <- dim(myX)[2]
myX <- scale(myX)
myY <- scale(myY)
logicRemove <- F
stepLength <- 0.001
maxSteps <- 150
XA <- NULL
activeSet <- rep(F, dm)
mu <- rep(0,dn)
error <- myY-mu
B <- matrix(0,dm,maxSteps)
beta <- rep(0,dm)
BETA <- matrix(0,dm,maxSteps)
cHat <- t(myX) %*% error
logicNonSingularity <- T
SST <- t(myY) %*% myY
SSE <- rep(0,maxSteps)
Rsquare <- rep(0,maxSteps)
varSeq <- list()
myThre <- 10^-15
k=1
while(k<=maxSteps && logicNonSingularity) {
error <- myY-mu
if(!logicRemove) {
errCor <- cor(myX, error)
errCor[activeSet] = 0
index <- which.max(abs(errCor))
activeSet[index] <- T
varSeq[k] <- paste("variable no.",index,"added:",
names(as.data.frame(myX))[index])
} else {
index <- which(rmVar==names(as.data.frame(myX)))
activeSet[index] <- F
varSeq[k] <- paste("variable no.",index,"droped:",
names(as.data.frame(myX))[index])
}
sign <- sign(cor(myX, error))
signId <- diag(dm)
for(i in 1:dm) {
signId[i,i] <-sign[i]
}
XA <- (myX %*% signId)[,activeSet]
XA <- as.matrix(XA)
one <- rep(1,sum(activeSet))
cHat <- t(myX) %*% (error)
cCap <-max(abs(cHat))
a <- t(myX) %*% XA %*% solve(t(XA) %*% XA) %*% one
gamma <- c(((cCap-cHat)/(1-a))[!activeSet],
((cCap+cHat)/(1+a))[!activeSet])
gamma <- min(gamma[gamma>myThre])
# lasso
bTilde <- solve(t(XA) %*% XA) %*% one
cStar <- -(BETA[activeSet,k-1] / (sign[activeSet]*bTilde))
cc=Inf
if(length(cStar[cStar>myThre])==0) {
cc=Inf
indexStar <- 0
rmVar <- NULL
} else {
cc <- min(cStar[cStar>myThre])
indexStar <- which(cStar==cc)
rmVar <- names(as.data.frame(myX))[activeSet][indexStar]
}
logicRemove <- cc < gamma
if(logicRemove) { gamma <- cc }
u <- gamma * (XA %*% solve(t(XA) %*% XA) %*% one)
mu <- mu + u
b <- gamma * (solve(t(XA) %*% XA) %*% one)
beta[activeSet] <- beta[activeSet] + b*sign[activeSet]
BETA[,k] <- beta
error <- myY-mu
cHat <- t(myX) %*% error
SSE[k] <- t(error) %*% error
Rsquare[k] <- 1 - (SSE[k]/SST)
k <- k+1
logicNonSingularity <- max(0,dim(XA)[2])<max(28,dim(XA)[1]-1)
if(logicRemove) {logicNonSingularity <- T}
}
k <- k-1
BETA <- BETA[,1:k]
t <- colSums(abs(BETA))
plot(t, rep(0,k), type="l", ylim=c(-1.2, 1.2),
xlab="t value", ylab="beta value")
title("Lasso Path No.1",
cex.main = 2,   font.main= 1)
for(i in 1:dm) { lines(t, BETA[i,], lwd=2, col=sample(colours(), 1)) }
varSeq
varSeq <- sapply(varSeq,function(v){return(v)})
varSeq
t
t
BETA[,58]
BETA[BETA[,58]!=0]
BETA[,BETA[,58]!=0]
BETA[,58]!=0
BETA[BETA[,58]!=0,]
BETA[,58][BETA[,58]!=0]
t
as.data.frame(BETA)
names(as.data.frame(BETA))
names(myData)
names(myData)[-1]
names(myData)[-1][BETA[,58]!=0]
which(BETA[,58]!=0)
t <- colSums(abs(BETA))
which(BETA[,58]!=0)
t
which(BETA[,58]!=0)
BETA[,58][BETA[,58]!=0]
names(myData)[-1][BETA[,58]!=0]
BETA[,58][BETA[,58]!=0]
beta
beta <- BETA[,58][BETA[,58]!=0]
beta
beta <- BETA[,58]
myX% * %beta
myX %*% beta
yHat <- myX %*% beta
yHat <- myX %*% beta
rm(list=ls())
myData <- read.csv("myData-2.csv")
myData <- myData[,2:dim(myData)[2]]
myX <- as.matrix(myData[,2:dim(myData)[2]])
myY <- myData[,1]
dn <- dim(myX)[1]
dm <- dim(myX)[2]
myX <- scale(myX)
myY <- scale(myY)
logicRemove <- F
stepLength <- 0.001
maxSteps <- 150
XA <- NULL
activeSet <- rep(F, dm)
mu <- rep(0,dn)
error <- myY-mu
B <- matrix(0,dm,maxSteps)
beta <- rep(0,dm)
BETA <- matrix(0,dm,maxSteps)
cHat <- t(myX) %*% error
logicNonSingularity <- T
SST <- t(myY) %*% myY
SSE <- rep(0,maxSteps)
Rsquare <- rep(0,maxSteps)
varSeq <- list()
myThre <- 10^-15
k=1
while(k<=maxSteps && logicNonSingularity) {
error <- myY-mu
if(!logicRemove) {
errCor <- cor(myX, error)
errCor[activeSet] = 0
index <- which.max(abs(errCor))
activeSet[index] <- T
varSeq[k] <- paste("variable no.",index,"added:",
names(as.data.frame(myX))[index])
} else {
index <- which(rmVar==names(as.data.frame(myX)))
activeSet[index] <- F
varSeq[k] <- paste("variable no.",index,"droped:",
names(as.data.frame(myX))[index])
}
sign <- sign(cor(myX, error))
signId <- diag(dm)
for(i in 1:dm) {
signId[i,i] <-sign[i]
}
XA <- (myX %*% signId)[,activeSet]
XA <- as.matrix(XA)
one <- rep(1,sum(activeSet))
cHat <- t(myX) %*% (error)
cCap <-max(abs(cHat))
a <- t(myX) %*% XA %*% solve(t(XA) %*% XA) %*% one
gamma <- c(((cCap-cHat)/(1-a))[!activeSet],
((cCap+cHat)/(1+a))[!activeSet])
gamma <- min(gamma[gamma>myThre])
# lasso
bTilde <- solve(t(XA) %*% XA) %*% one
cStar <- -(BETA[activeSet,k-1] / (sign[activeSet]*bTilde))
cc=Inf
if(length(cStar[cStar>myThre])==0) {
cc=Inf
indexStar <- 0
rmVar <- NULL
} else {
cc <- min(cStar[cStar>myThre])
indexStar <- which(cStar==cc)
rmVar <- names(as.data.frame(myX))[activeSet][indexStar]
}
logicRemove <- cc < gamma
if(logicRemove) { gamma <- cc }
u <- gamma * (XA %*% solve(t(XA) %*% XA) %*% one)
mu <- mu + u
b <- gamma * (solve(t(XA) %*% XA) %*% one)
beta[activeSet] <- beta[activeSet] + b*sign[activeSet]
BETA[,k] <- beta
error <- myY-mu
cHat <- t(myX) %*% error
SSE[k] <- t(error) %*% error
Rsquare[k] <- 1 - (SSE[k]/SST)
k <- k+1
logicNonSingularity <- max(0,dim(XA)[2])<max(28,dim(XA)[1]-1)
if(logicRemove) {logicNonSingularity <- T}
}
varSeq <- sapply(varSeq,function(v){return(v)})
k <- k-1
BETA <- BETA[,1:k]
t <- colSums(abs(BETA))
t
which(BETA[,58]!=0)
names(myData)[-1][BETA[,58]!=0]
plot(t, rep(0,k), type="l", ylim=c(-1.2, 1.2),
xlab="t value", ylab="beta value")
title("Lasso Path No.1",
cex.main = 2,   font.main= 1)
for(i in 1:dm) { lines(t, BETA[i,], lwd=2, col=sample(colours(), 1)) }
t
which(BETA[,58]!=0)
names(myData)[-1][BETA[,58]!=0]
t
which(BETA[,58]!=0)
names(myData)[-1][BETA[,58]!=0]
t
which(BETA[,58]!=0)
names(myData)[-1][BETA[,58]!=0]
t
which(BETA[,50]!=0)
names(myData)[-1][BETA[,50]!=0]
t
which(BETA[,50]!=0)
names(myData)[-1][BETA[,50]!=0]
rm(list=ls())
myData <- read.csv("myData-3.csv")
myData <- myData[,2:dim(myData)[2]]
myX <- as.matrix(myData[,2:dim(myData)[2]])
myY <- myData[,1]
dn <- dim(myX)[1]
dm <- dim(myX)[2]
myX <- scale(myX)
myY <- scale(myY)
logicRemove <- F
stepLength <- 0.001
maxSteps <- 150
XA <- NULL
activeSet <- rep(F, dm)
mu <- rep(0,dn)
error <- myY-mu
B <- matrix(0,dm,maxSteps)
beta <- rep(0,dm)
BETA <- matrix(0,dm,maxSteps)
cHat <- t(myX) %*% error
logicNonSingularity <- T
SST <- t(myY) %*% myY
SSE <- rep(0,maxSteps)
Rsquare <- rep(0,maxSteps)
varSeq <- list()
myThre <- 10^-15
k=1
while(k<=maxSteps && logicNonSingularity) {
error <- myY-mu
if(!logicRemove) {
errCor <- cor(myX, error)
errCor[activeSet] = 0
index <- which.max(abs(errCor))
activeSet[index] <- T
varSeq[k] <- paste("variable no.",index,"added:",
names(as.data.frame(myX))[index])
} else {
index <- which(rmVar==names(as.data.frame(myX)))
activeSet[index] <- F
varSeq[k] <- paste("variable no.",index,"droped:",
names(as.data.frame(myX))[index])
}
sign <- sign(cor(myX, error))
signId <- diag(dm)
for(i in 1:dm) {
signId[i,i] <-sign[i]
}
XA <- (myX %*% signId)[,activeSet]
XA <- as.matrix(XA)
one <- rep(1,sum(activeSet))
cHat <- t(myX) %*% (error)
cCap <-max(abs(cHat))
a <- t(myX) %*% XA %*% solve(t(XA) %*% XA) %*% one
gamma <- c(((cCap-cHat)/(1-a))[!activeSet],
((cCap+cHat)/(1+a))[!activeSet])
gamma <- min(gamma[gamma>myThre])
# lasso
bTilde <- solve(t(XA) %*% XA) %*% one
cStar <- -(BETA[activeSet,k-1] / (sign[activeSet]*bTilde))
cc=Inf
if(length(cStar[cStar>myThre])==0) {
cc=Inf
indexStar <- 0
rmVar <- NULL
} else {
cc <- min(cStar[cStar>myThre])
indexStar <- which(cStar==cc)
rmVar <- names(as.data.frame(myX))[activeSet][indexStar]
}
logicRemove <- cc < gamma
if(logicRemove) { gamma <- cc }
u <- gamma * (XA %*% solve(t(XA) %*% XA) %*% one)
mu <- mu + u
b <- gamma * (solve(t(XA) %*% XA) %*% one)
beta[activeSet] <- beta[activeSet] + b*sign[activeSet]
BETA[,k] <- beta
error <- myY-mu
cHat <- t(myX) %*% error
SSE[k] <- t(error) %*% error
Rsquare[k] <- 1 - (SSE[k]/SST)
k <- k+1
logicNonSingularity <- max(0,dim(XA)[2])<max(28,dim(XA)[1]-1)
if(logicRemove) {logicNonSingularity <- T}
}
varSeq <- sapply(varSeq,function(v){return(v)})
k <- k-1
BETA <- BETA[,1:k]
t <- colSums(abs(BETA))
t
which(BETA[,50]!=0)
names(myData)[-1][BETA[,50]!=0]
plot(t, rep(0,k), type="l", ylim=c(-1.2, 1.2),
xlab="t value", ylab="beta value")
title("Lasso Path No.1",
cex.main = 2,   font.main= 1)
for(i in 1:dm) { lines(t, BETA[i,], lwd=2, col=sample(colours(), 1)) }
t
t
which(BETA[,52]!=0)
names(myData)[-1][BETA[,52]!=0]
