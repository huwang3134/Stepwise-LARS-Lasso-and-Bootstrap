{
    "contents" : "# Clean memory, read data, include sources\n# install.packages(\"lars\")\n# install.packages(\"zoo\")\nrm(list=ls())\nlibrary(lars)\nlibrary(zoo)\nsource(\"p4-util-myLasso.R\")\nsource(\"p4-util-processData.R\")\n\nmyData <- read.csv(\"myData-3.csv\")\n# Remove row names\nmyData <- myData[,2:dim(myData)[2]]\nY <- processData(myData)$dataY\nX <- processData(myData)$dataX\ndn <- dim(X)[1]\ndm <- dim(X)[2]\n\n# -------------------- SET UP BOOTSTRAP -------------------- #\n\n# Set up the bootStrap\nnumBoot <- 25\nbootIndex <- list()\nbootSet <- matrix(F,dn,numBoot)\nmyBeta <- list()\nk <- rep(0,numBoot)\n# Calculate all the bootstraps and store the result\nb<-1\nfor(b in 1:numBoot) {\n  bootIndex[[b]] <- sample.int(29,  size=29, replace=T)\n  bootData <- myData[bootIndex[[b]],]\n  myY <- processData(bootData)$dataY\n  myX <- processData(bootData)$dataX\n  \n  bootSet[,b][bootIndex[[b]]] <- T\n  \n  myBeta[[b]] <- myLasso(myX, myY, numUnique=(sum(bootSet[,b])-1))\n#   myBeta[[b]] <- t(lars(myX, myY, type=\"lasso\")$beta)\n  k[b] <- dim(myBeta[[b]])[2]\n}\n\n# -------------------- COMPUTE ERROR -------------------- #\n\nmySum <- list()\n# Calculate the sum of Q's for each i\nfor(i in 1:dn) {\n  # Trace all the errors for a i\n  erri <- list()\n  ti <- list()\n  Ccomp <- seq(1:numBoot)[!bootSet[i,]]\n  # Calculate all the Q's of different bootstrap for a i\n  for(b in Ccomp) {\n    errib <- rep(0,k[b])\n    tib <- rep(0,k[b])\n    for(tt in 1:k[b]) {\n      yiHat <- X[i,] %*% myBeta[[b]][,tt]\n      errib[tt] <- abs(Y[i] - yiHat)\n      tib[tt] <- sum(abs(myBeta[[b]][,tt])) \n    }\n    erri[[which(Ccomp==b)]] <- errib\n    ti[[which(Ccomp==b)]] <- tib\n  }\n  # Arrange the Q's\n  nt <- length(do.call(\"c\",erri))\n  sumi <- matrix(NA,length(Ccomp)+1,nt)\n  sumi[1,] <- do.call(\"c\",ti)\n  start <- 1\n  for(b in Ccomp) {\n    sumi[which(Ccomp==b)+1, start:(start+k[b]-1)] <- \n      erri[[which(Ccomp==b)]]\n    start <- start+k[b]\n  }\n  # Sort the Q's according to t\n  lineOrder <- order(sumi[1,])\n  sumi <- sumi[,lineOrder]\n  # Fill the matrix\n  interpi <- as.data.frame(t(sumi))\n  interpi <- zoo(interpi)\n  index(interpi) <- interpi[,1]\n  interpi <- na.approx(interpi, na.rm=F)\n  sumi <- t(as.matrix(interpi))\n  colnames(sumi) <- rownames(sumi) <- NULL\n  # Arrange the sum accordingly\n  mySumi <- matrix(NA,dn+1,dim(sumi)[2])\n  mySumi[1,] <- sumi[1,]\n  mySumi[i+1,] <- colMeans(sumi[-1,], na.rm=T)\n  mySum[[i]] <- mySumi\n}\n# Final arranges\nmySum <- do.call(\"cbind\",mySum)\nlineOrder <- order(mySum[1,])\nmySum <- mySum[,lineOrder]\ninterpi <- as.data.frame(t(mySum))\ninterpi <- zoo(interpi)\nindex(interpi) <- interpi[,1]\ninterpi <- na.approx(interpi, na.rm=F)\nmySum <- t(as.matrix(interpi))\ncolnames(mySum) <- rownames(mySum) <- NULL\n\n# -------------------- FULL MODEL ERROR -------------------- #\n\nlarModel <- lars(X, Y, type=\"lasso\")\nlarBeta <- t(larModel$beta)\nk <- dim(larBeta)[2]\nt <- rep(0,k)\ngamma <- rep(0,k)\n\ni <- j <- tt <- 2\n\nfor(tt in 1:k) {\n  for(i in 1:dn) {for(j in 1:dn) {\n    gamma[tt] <- gamma[tt] + abs(Y[i] - (X[j,] %*% larBeta[,tt]))\n  }}\n  t[tt] <- sum(abs(larBeta[,tt]))\n}\ngamma <- gamma / (dn^2)\nmyGamma <- matrix(NA,2,dim(mySum)[2]+k)\nmyGamma[1,1:dim(mySum)[2]] <- mySum[1,]\nmyGamma[1,-(1:dim(mySum)[2])] <- t\nmyGamma[2,-(1:dim(mySum)[2])] <- gamma\n\ninterpi <- as.data.frame(t(myGamma))\ninterpi <- zoo(interpi)\nindex(interpi) <- interpi[,1]\ninterpi <- na.approx(interpi, na.rm=F)\nmyGamma <- t(as.matrix(interpi))\nmyGamma <- myGamma[2,1:dim(mySum)[2]]\n\n# -------------------- FULL MODEL ERROR -------------------- #\n\nlarModel <- lars(X, Y, type=\"lasso\")\nlarBeta <- t(larModel$beta)\nk <- dim(larBeta)[2]\nt <- rep(0,k)\nerr <- rep(0,k)\nfor(i in 1:k) {\n  yHat <- X %*% larBeta[,i]\n  t[i] <- sum(abs(larBeta[,i]))\n  err[i] <- mean(abs(Y - yHat))\n}\nerrBar <- matrix(NA,2,dim(mySum)[2]+k)\nerrBar[1,1:dim(mySum)[2]] <- mySum[1,]\nerrBar[1,-(1:dim(mySum)[2])] <- t\nerrBar[2,-(1:dim(mySum)[2])] <- err\n\ninterpi <- as.data.frame(t(errBar))\ninterpi <- zoo(interpi)\nindex(interpi) <- interpi[,1]\ninterpi <- na.approx(interpi, na.rm=F)\nerrBar <- t(as.matrix(interpi))\nerrBar <- errBar[2,1:dim(mySum)[2]]\n\n# -------------------- 632+ ERROR TOWARDS T -------------------- #\n\nerrHat <- colMeans(mySum[-1,], na.rm=T)\nerrHat <- c(errHat)\nerrBar <- c(errBar)\nmyGamma <- c(myGamma)\n\nrHat <- (errHat-errBar) / (myGamma-errBar)\nomegaHat <- 0.632 / (1 - (0.368*rHat))\nerrFinal <- ((1-omegaHat) * errBar) + (errHat * omegaHat)\n\nwrite.csv(rbind(t,errFinal),file=\"myErr-3.csv\")\n\n# -------------------- PLOT BOOTSTRAP ERROR -------------------- #\n\npar(mfrow=c(2,2))\nt <- c(mySum[1,])\nk <- length(t)\n\n# ---------------------------------------- #\n\nplot(t, rep(0,k), type=\"l\", ylim=c(0, 4), \n     xlab=\"t value\", ylab=\"absolute error\")\ntitle(\"1 bootstrap estimate\", \n      cex.main = 2,   font.main= 1)\nfor(i in 1:dn+1) { lines(t, mySum[i,], lwd=1) }\nlines(t, colMeans(mySum[-1,], na.rm=T), lwd=4, col=\"RED\")\n\n# ---------------------------------------- #\n\nfor(i in 1:dn+1) { mySum[i,] <- 0.632*c(mySum[i,]) + 0.368*c(errBar) }\nplot(t, rep(0,k), type=\"l\", ylim=c(0, 3), \n     xlab=\"t value\", ylab=\"absolute error\")\ntitle(\"0.632 bootstrap estimate\", \n      cex.main = 2,   font.main= 1)\nfor(i in 1:dn+1) { lines(t, mySum[i,], lwd=1) }\nlines(t, colMeans(mySum[-1,], na.rm=T), lwd=4, col=\"RED\")\n\n# ---------------------------------------- #\n\nplot(t, rep(0,k), type=\"l\", ylim=c(0, 4), \n     xlab=\"t value\", ylab=\"overfitting rate\")\ntitle(\"relative rate of overfitting\", \n      cex.main = 2,   font.main= 1)\nlines(t, rHat, lwd=4, col=\"RED\")\n\n# ---------------------------------------- #\n\nplot(t, rep(0,k), type=\"l\", ylim=c(0, 4), \n     xlab=\"t value\", ylab=\"predictive error\")\ntitle(\"0.632+ bootstrap estimate\", \n      cex.main = 2,   font.main= 1)\nlines(t, errFinal, lwd=4, col=\"RED\")",
    "created" : 1425847515887.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1934432021",
    "id" : "FF0498FE",
    "lastKnownWriteTime" : 1425843725,
    "path" : "P:/6740 take home exam 2/6740-exam2-code/p4-bootstrap.R",
    "project_path" : "p4-bootstrap.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}